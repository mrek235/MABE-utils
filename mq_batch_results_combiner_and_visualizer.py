import os
import subprocess
import glob
import pandas as pd
from random import random



'''
This part loads population loader files from the MQ experiment and then produces a CSV file with results experiments, sorted from highest scoring to lowest scoring. Then, changes the processing visualizer script to visualize the best (or one of the best) result.
'''

'''
REQUIREMENTS:
Agents must have been generated by using MQ and this script must be in the same folder with the experiment folders from MQ ( the folders that start with C0,C1 etc.)
Processing_Visualizer folder should be copied to the work folder.

If processing is already an environment variable -i.e. can be reached from bash using "processing" command- one should be able to change the last line to 

os.system("processing Best_Agent_Visualizer/Best_Agent_Visualizer.pyde")

The user should specify the settings files and the work directories.

There must be a population loader file in the work directory. (This is used for visualization purposes).

Population loader file has only one line which says:

MASTER = greatest 1 by ID from { 'LOD_organisms.csv' }

'''

files = glob.glob('C*/**/LOD_organisms.csv')
work_dir = "/home/vimrek/MABE_withTPM/work/"
output_dir = work_dir + "MassVisualizationOutputs/"
global_settings = work_dir+"settings_world_larissa.cfg "
organism_settings = work_dir+"settings_organism_larissa.cfg "
world_settings = work_dir+"settings_world_larissa.cfg "
settings = " -f " + global_settings + organism_settings + world_settings
population_loader = work_dir + "population_loader.plf"





os.system("mkdir MassVisualizationOutputs")

for file in files:
	copy_LOD_organisms_to_work = "cp "+work_dir+file + " " + work_dir+"LOD_organisms.csv"
	os.system(copy_LOD_organisms_to_work)
	file_dir = file[0:-22]
	file_name = file.split("/")
	file_name = file_name[0].split(".")[0]+file_name[1]
	
#visualize_path1  = "mabe -p GLOBAL-initPop " + population_loader + " GLOBAL-outputPrefix "+output_dir +" GLOBAL-mode visualize BRAIN_MARKOV_ADVANCED-recordIOMap 1 WORLD_PATHFOLLOW-mapNames "+work_dir+"path1.txt"

#visualize_all_paths  = "mabe -p GLOBAL-initPop "+population_loader+ " GLOBAL-outputPrefix "+output_dir +" GLOBAL-mode visualize BRAIN_MARKOV_ADVANCED-recordIOMap 1"

	visualize_path1  = "mabe -p GLOBAL-initPop " + population_loader +" GLOBAL-mode visualize BRAIN_MARKOV_ADVANCED-recordIOMap 1 WORLD_PATHFOLLOW-mapNames "+work_dir+"path1.txt" 

	visualize_all_paths  = "mabe -p GLOBAL-initPop "+ population_loader +" GLOBAL-mode visualize BRAIN_MARKOV_ADVANCED-recordIOMap 1"

	
	
	
	#for checking if the given condition has used "path1" only or it used all paths (MM = Many Maps)
	
	if file.find("path1.txt") != -1:
		#print(file[0:-22])
		command = work_dir + visualize_path1 + settings	
	else:
		command = work_dir + visualize_all_paths + settings
	print(command)
	print(os.getcwd())
	os.system("mv pathVisualization.txt MassVisualizationOutputs/"+file_name+"pathVisualization.txt")
	os.system("mv visualizationData_101.txt MassVisualizationOutputs/"+file_name+"visualizationData_101.txt")
	os.system(command)
	
	

data_files = glob.glob("MassVisualizationOutputs/**Data_101.txt")

output = open("merged_data.csv","w")
output.write("score,completion,reachGoal,firstTurn,sign2,sign3,data_file\n")
output.close()
output = open("merged_data.csv", "a")
vis_files = []
for data_file in data_files:
	f = open(data_file,"r")
	lines = f.read()
	data_line = lines.split("\n")[1] + "," + data_file
	print(data_line)
	output.write(data_line+"\n")
	f.close
	
	vis_files.append(data_file.replace("visualizationData_101","pathVisualization"))
output.close()	


merged_data = pd.read_csv("merged_data.csv")
merged_data['vis_file'] = vis_files
merged_data = merged_data.sort_values(by=['score'],ascending = False)
merged_data.to_csv("merged_data.csv")

merged_data = pd.read_csv("merged_data.csv")
file_to_best_agent = work_dir + merged_data['vis_file'][0]
the_new_path_for_vis = "fileName = '" + file_to_best_agent+ "'"
processing_visualizer_address = "/home/vimrek/MABE_withTPM/work/Processing_Visualizer/Processing_Visualizer.pyde"


os.system("cp Processing_Visualizer/Processing_Visualizer.pyde Best_Agent_Visualizer/Best_Agent_Visualizer.pyde")



with open('Processing_Visualizer/Processing_Visualizer.pyde') as bestin, open('Best_Agent_Visualizer/Best_Agent_Visualizer.pyde', 'w') as bestout:
    for i, item in enumerate(bestin, 1):
        if i == 9: 
            item = the_new_path_for_vis 
        bestout.write(item)


os.system("processing-3.5.4/processing Best_Agent_Visualizer/Best_Agent_Visualizer.pyde")



